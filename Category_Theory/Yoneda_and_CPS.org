#+TITLE: Yoneda and CPS
#+bibliography: "./../References/Mathematics/Category_Theory/Books.bib"
#+bibliography: "./../References/PL/Type_Theory/Parametricity/Papers.bib"
#+LATEX_HEADER: \usepackage{xypic}


This is a note based on a short conversation with [[https://bartoszmilewski.com/][Bartosz Milewski]] at ICFP 2024.
Bartosz Milewski is the author of [[https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/][Category Theory for Programmers]].
I am grateful for his kindness and the short conversation.

* Why I am Writing This
While at ICFP 2024, I asked Bartosz: "How is Yoneda Lemma used in the field of programming language".
I got an answer along the line of:
#+begin_quote
Apply Yoneda Lemma to the identity functor gives you CPS
#+end_quote

I shall attempt to illustrate my understanding of this concept

* Background and Setup

** Yoneda Lemma
We shall take Yoneda lemma for granted, which is stated as follow:

\[\forall F : \mathsf C \to \mathsf{Set} \,.\,  \operatorname{Hom}(\mathsf C (c, {-}), F) \cong F c \]

*** Meaning of the Symbols
- $\mathsf C$ :: A locally small category
- $c$ :: An object in $\mathsf C$
- $F$ :: A normal (a.k.a covariant) functor of the type C \to Set
- $\operatorname{Hom}(F, G)$ :: The collection of natural transformations from functor $F$ to functor $G$
- $F c$ :: The image of object $c \in \mathsf C$ mapped by $F$
- $\cong$ :: Set isomorphism
  
** Category of Types
We make the assumption the reader is familiar with the concept of "category of types"
(Those without can refer to Steve Awodey's Textbook [cite:@10.5555/2060081], Chapter 6, Section 6)

We shall denote a category of types as $\mathsf C (\lambda)$

/I also made the assumption that each type is concretely represented by a set of expressions with that type./

I think this is needed to make the "identity functor" part make sense

** Natural Transformation in the Context of Category of Types

*WARNING: For this section, I only have intuition, I very much may explain things wrong. I recommend reading more from more experienced people*
- [[https://bartoszmilewski.com/2014/09/22/parametricity-money-for-nothing-and-theorems-for-free/][Bartosz's own blog]]
- /Theorems for Free/ by Philip Wadler [cite:@10.1145/99370.99404]
- /Types, Abstraction and Parametric Polymorphism/ by John C. Reynolds

Intuitively, a parametric function of the type ~forall a . F a~ is:

#+begin_center
A collection of functions, one for each type
#+end_center

This definition is similar to the definition of natural transformation:

#+begin_center
A collection of morphism, one for each object
#+end_center

I believe, a parametric polymorphic function of the type ~forall a . F a \to G a~ is in fact, a natural transformation between functor ~F, G~

* Main Theorem

Let us instantiate Yoneda Lemma with:
- $\mathsf C = \mathsf C (\lambda)$
- $F = I$
- $c = A$ for some type $A$

Our isomorphism now becomes

\[\operatorname{Hom}(\mathsf C (\lambda) (A, {-}), I) \cong I A = A \]

** RHS
On the RHS, we have a type $A$, which is the set of all the expressions of type $A$

** LHS
Consider an arbitrary natural transformation $\alpha$ in $\operatorname{Hom}(\mathsf C (\lambda) (A, {-}), I)$
We have the following commutative diagram w.r.t $\alpha$

\begin{equation*}
\xymatrix{
\carrier{\mathsf C (\lambda) (A, B)}
\ar[r]^{\alpha_B}^{}
\ar[d]^{f_*}
&
\carrier{B}
\ar[d]^{If}
\\
\carrier{\mathsf C (\lambda) (A, C)}
\ar[r]^{\alpha_C}^{}
&
\carrier{C}
}
\end{equation*}

We now notice:
- $\mathsf C (\lambda) (A, B)$ in the category of types is functions of type $A \to B$. (This is also the exponential $B^A \in \mathsf C(\lambda)$)

Thus we get:

\begin{equation*}
\xymatrix{
\carrier{(A \to B)}
\ar[r]^{\alpha_B}^{}
\ar[d]^{f_*}
&
\carrier{B}
\ar[d]^{If}
\\
\carrier{(A \to C)}
\ar[r]^{\alpha_C}^{}
&
\carrier{C}
}
\end{equation*}

Thus each component of $\alpha$ has type:

\[ \alpha_b : (A \to b) \to b \]

Consider $\alpha$ as a collection of functions, we get

\[\alpha : \forall b \,.\, (A \to b) \to b\]

Which is the type of CPS.

** Isomorphism
Bringing back isomorphism between LHS and RHS, we get:

#+begin_center
The collection of CPS functions of type
\[\forall b \,.\, (A \to b) \to b\] 
is isomorphic to the collection of expressions of type
\[A\]
#+end_center
