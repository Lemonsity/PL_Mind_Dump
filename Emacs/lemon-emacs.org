#+TITLE: Lemon's Emacs Configuration
#+AUTHOR: Lemon
#+STARTUP: overview

Here you can find my Emacs configuration.

* Introduction 

I try to document this configuration file to a good extend, this way you can pick and choose the parts you want.
Maybe the configuration throws a bug for a feature you never use. In which case hopefully you can find the related configuration and just throw it out.

* Dependencies / Prerequisites

Documentation on the environments I use on my machine. Meant to replicate the same work environment

** Fonts
:PROPERTIES:
:CUSTOM_ID: dependency-fonts
:END:

#+begin_quote
*WARNING*:
It seems the font name can be different based on the platforms (Win, Mac, Linux).
Edit [[#emacs-faces][setting for faces]] to match the font name
#+end_quote

*** [[https://www.jetbrains.com/lp/mono/][JetBrain Mono]]

Solid mono-width font for programmers, with Ligature support

[[https://www.jetbrains.com/lp/mono/][- Download]]

*** [[https://typeof.net/Iosevka/][Iosevka]]

Solid font with ligature support. Available in both mono-width and variable-width

[[https://typeof.net/Iosevka/][- Download]]

#+begin_quote
*WARNING*: 
Ligature may look off on small font size
#+end_quote

**** Customization *(Optional)*

You can also customize it:
- [[https://typeof.net/Iosevka/customizer][Visual customizer that generates the specifications]]
- [[https://github.com/be5invis/Iosevka/blob/main/doc/custom-build.md][Instruction for compiling the font from a generated specification]]

The font generation also have dependencies:
- [[#dependency-nodejs][Node.js]] :: Code for font generation
- [[https://freetype.org/ttfautohint/#download][ttfautohint]] :: Tool for font generation. You might be able to find it in your package manager. Otherwise, there is direct ~.exe~ executable for Windows

** Languages

*** [[https://www.haskell.org/][Haskell]]
:PROPERTIES:
:CUSTOM_ID: dependency-haskell
:END:
[[https://en.wikipedia.org/wiki/Haskell][A purely functional programming language]].
Influential and well-known for some groups of people.
[[http://james-iry.blogspot.com/2009/05/brief-incomplete-and-mostly-wrong.html]["A monad is just a monoid in the category of endofunctors, what's the problem?"]]

**** [[https://www.haskell.org/ghcup/][GHCup]]
My recommended installation method.
Easy to use, handles many aspects of Haskell.

You can find installation instructions [[https://www.haskell.org/ghcup/][here]].

Some of the software GHCup can help manage:
- GHC :: Compiler
- HLS :: Language server
- stack :: Project manager
- cabal :: Package manager

**** Other Installation Methods
I did not try these methods, but they are worth a try:
- You might be able to find on your package manager
- You can go directly to the [[https://www.haskell.org/ghc/download.html][source]]
- You can try install through [[https://docs.haskellstack.org/en/stable/][stack]]

*** [[https://www.rust-lang.org/][Rust]]
[[https://en.wikipedia.org/wiki/Rust_(programming_language)][A safe, low-level programming language.]]
A safe C.

**** Official Installation Method
The official install is quite solid, you can find it on the [[https://www.rust-lang.org/][homepage]], under [[https://www.rust-lang.org/tools/install][a tab]].

**** [[https://rust-analyzer.github.io/][rust-analyzer]]
/rust-analyzer/ is a language server that provides a huge amount of information about your Rust program.

It is used by [[#emacs-lsp-mode][lsp-mode]]

Installation details:
1. Make sure ~rustup~ is usable in CLI. If you installed Rust using official method, you will likely have it.
2. You can add /rust-analyzer/ as a [[https://rust-lang.github.io/rustup/concepts/components.html][component]] using ~rustup~.
3. [[https://rust-analyzer.github.io/manual.html#installation][rust-analyzer also need the source code of Rust]], you should add it as a component.

Hopefully the install will be more mainstream in the future

**** Other Installation Methods
- Some package managers can install Rust
  
*** [[https://racket-lang.org/][Racket]]
[[https://en.wikipedia.org/wiki/Racket_(programming_language)][A functional programming language]] from the [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]] / [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]] family

**** Package Manager
Manjaro's package manager, ~pacman~, came with a pretty up to date version of Racket.
So I used that, which comes with:
- ~raco~ :: Package manager
- DrRacket  :: Racket's official editor
  
**** Other Installation Methods
You can find some recommended installation on [[https://racket-lang.org/][the official website]]:
- Windows :: I used an installer from [[https://download.racket-lang.org/][the official website]]
  
*** [[https://ocaml.org/][OCaml]] *(Indirectly Required)*
:PROPERTIES:
:CUSTOM_ID: dependency-ocaml
:END:
[[https://en.wikipedia.org/wiki/OCaml][A industry-ready functional programming language]].

It is used by [[#dependency-coq][Coq]].

**** Official Installation Methods
You can find the official installation methods [[https://ocaml.org/docs/installing-ocaml][here]].
It will by extension install the ~opam~ package manager

I used the ~pacman~ package manager

*** [[https://coq.inria.fr/][Coq]]
:PROPERTIES:
:CUSTOM_ID: dependency-coq
:END:
[[https://en.wikipedia.org/wiki/Coq_(software)][A battle-/proven/ proof assistant]].

It is used by [[#emacs-proof-general][Proof General]]

**** My Installation Method
I used ~opam~ to install Coq.
You can find the instruction [[https://coq.inria.fr/opam-using.html][here]].

**** Official Installation Methods
There are other recommended ways to install Coq.
You can find them [[https://coq.inria.fr/download][here]].

Unfortunately I did not try them

*** [[https://wiki.portal.chalmers.se/agda/pmwiki.php][Agda]]
:PROPERTIES:
:CUSTOM_ID: dependency-agda
:END:
[[https://en.wikipedia.org/wiki/Agda_(programming_language)][A functional proof assistant]]. The language that truly representing the /Curry/ in [[https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence][Curry-Howard]].

**** My Installation Method
I followed the [[https://plfa.github.io/GettingStarted/][Getting Started]] chapter of [[https://plfa.github.io/][Programming Language Foundations in Agda]].
It also includes some setup advice for Emacs

You can find the installation guide [[https://plfa.github.io/GettingStarted/][here]].

*** [[https://tug.org/][TeX]] / [[https://www.latex-project.org/][LaTeX]]
:PROPERTIES:
:CUSTOM_ID: dependency-tex
:END:
Donald Knuth's legacy, perhaps the most capable [[https://en.wikipedia.org/wiki/TeX][typesetting program]] ever.
(Slowly overtaken by [[https://github.com/typst/typst][Typst]], also [[https://orgmode.org/][Org]] is pretty solid)

**** My Installation Method
I actually lost my installation method, but tracking my opened links, I think I followed this guide:

[[https://www.tug.org/texlive/quickinstall.html][TeX Live - Quick Install for Unix]]

The installation was very long, take your time.

*** [[https://nodejs.org/en][Node.js]] *(Optional)*
:PROPERTIES:
:CUSTOM_ID: dependency-nodejs
:END:
[[https://en.wikipedia.org/wiki/Node.js][Love it or hate it]], [[https://en.wikipedia.org/wiki/Jeff_Atwood][you will use it...]]

Try your package manager first (Manjaro has version 18, 20).
Then try [[https://nodejs.org/en][official website]].

**** nvm
Unfortunately Node version is messy that people have to develop their own version manager.

You can find the repository [[https://github.com/nvm-sh/nvm][here]]

* Preparing Emacs

To use this file directly:
- Create a file ~~/.emacs.d/init.el~
- Put the following in the ~init.el~ file:
  #+begin_src
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  ;; Get Proof-General and Agda mode working before adding the following line
  (org-babel-load-file "~/.emacs.d/lemon-emacs.org")
  #+end_src
- Place this ~.org~ file in ~~/.emacs.d/~ also
- Launch Emacs

* Custom Definitions

#+begin_src emacs-lisp
  (defun lemon/require-package (package)
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

* Scaffolding Config

** Basic
#+begin_src emacs-lisp
  (require 'package)

  (unless package-archive-contents
      (package-refresh-contents))
#+end_src

** [[https://jwiegley.github.io/use-package/][/use-package/]]: Streamline Package Installation

#+begin_src emacs-lisp
  (require 'use-package)
#+end_src

Ensure all packages are downloaded by default
#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

- [[https://github.com/jwiegley/use-package][Source code]]

** /diminish/: Cleanup Mode Line

#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

- Add ~:diminish~ to ~use-package~ macro call to hide a package (Occassionally may get overwritten)

* Emacs Configuration

** General Appearance
We customize some appearance to:
- [X] Remove menu bar on top
- [X] Add visual cue to bad input
- [X] Highlight the line we are on in the active window
- [ ] Global highlight line
- [ ] Highlight line in all windows

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq visible-bell t)
  ;; (global-hl-line-mode 1)
  ;; (setq hl-line-sticky-flag nil)
#+end_src

** Windows Splitting

- [X] Split Side by Side : When width > 160
- [X] Split Over and Under : Never

#+begin_src emacs-lisp
  (setq
   split-width-threshold 160
   split-height-threshold nil) 		; Always split horizontally
#+end_src

** Minibuffer Completion

Better minibuffer completion.

Ivy, Counsel, Swiper are all grouped together now
- [[https://github.com/abo-abo/swiper][Source Code]]
- [[https://oremacs.com/swiper/][Documentation]]

*** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind
    (("C-s" . swiper)) ;; Swiper gives list of completion suggestion
    :config
    (ivy-mode 1))
#+end_src

*** Counsel

Better file search and buffer search

#+begin_src emacs-lisp
  (use-package counsel
    :diminish
    :bind
    (("M-x" . 'counsel-M-x)) ;; Default to counsel's interactive command
    :config
    (counsel-mode 1))
#+end_src

** Position in File

#+begin_src emacs-lisp
  (setq column-number-mode t)
  (setq display-line-numbers t)
  (global-display-line-numbers-mode 1)
#+end_src

** /Dired/ Mode: File Explorer in Emacs

#+begin_src emacs-lisp
  ;; ask before create dir
  (setq dired-create-destination-dirs 'ask) 
  ;; press [a] to open dir without open new buffer
  (put 'dired-find-alternate-file 'disabled nil) 
#+end_src

* Faces / Fonts                                                                              :Faces:
:PROPERTIES:
:CUSTOM_ID: emacs-faces
:END:
In Emacs, /face/ means the properties of a displayed text.

** General Faces *(Breakable with bad dependency)*
I have some favourite fonts, which I will configure here.

#+begin_quote
*WARNING*
This part is breakable if you didn't install the [[#dependency-fonts][fonts from dependency]].
#+end_quote

*** Default Face
Victor Mono is a very solid font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                    :family "VictorMono"
                    :width 'expanded
                    :overline nil)
#+end_src

I also suggest Iosevka, but it seems to not display well for small fonts.
#+begin_src
  (set-face-attribute 'default nil
                      :family "IosevkaCustom"
                      :width 'extended
                      :overline nil)
#+end_src

*** Fixed Pitch Face
This is for mono-width faces.

#+begin_src emacs-lisp
  (set-face-attribute 'fixed-pitch nil
                      :family "VictorMono"
                      :width 'expanded)
  ; A collection of choices includes "IosevkaCustom", "JetBrainsMono", "VictorMono"
#+end_src

*** Variable Pitch Face: Good for normal text mode

#+begin_src emacs-lisp
  (set-face-attribute 'variable-pitch nil
                      :family "IosevkaEtoile")
#+end_src

*** Line Highlight
#+begin_src emacs-lisp
  ;; (set-face-attribute 'hl-line nil
  ;;                     :background "azure2")
#+end_src

** [[https://github.com/mickeynp/ligature.el][Ligature.el]]
[[https://en.wikipedia.org/wiki/Ligature_(writing)][Ligature]] is when adjacent letters are rendered together as one entity.

#+begin_src emacs-lisp
  (use-package ligature
    :config
    ;; Enable the www ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("www" "**" "***"  "\\\\" "\\\\\\"

                                         "{-" "-}" "/*" "/**" "**/" "*/" "//" "///"
                                         "<#--" "<!--"
                                         "</" "</>" "/>"

                                         "##" "###" "####"
                                         "---" "----"

                                         "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="

                                         "[||]" "|]" "[|" "|}" "{|" "[<" ">]" 

                                         ".-" ".=" ".." "..." "..<"  ".="

                                         "??" "!!" "%%"
                                         "???" "?:" ":?" "?." ".?"

                                         ":=" "::=" "||=" "&=" "|=" "^=" "?="

                                         "&&" "||"
                                         "->" "<-" "-->" "<--" "->>" "<<-"
                                         "=>" "<=" "==>" "<==" "=>>" "<<="
                                         "~>"  "<~" "~~>" "<~~"
                                         "~-" "-~"
                                         "<->" "<=>" "<==>" "~~" "<~>" 

                                         ">>=" "=<<" ">=>" "<=<" ">>" "<<"

                                         "***" "&&&" ">>>" "<<<"

                                         ">-" "-<" ">>-" "-<<" ">->" "<-<" 

                                         ">=" "<="

                                         "|->" "<-|" "|=>" "<=|"

                                         "-|" "_|_" "|-" "||-" 

                                         "<*" "<*>" "*>" "<$" "<$>" "$>" "<+" "<+>" "+>" "<|" "<|>" "|>"
                                         "<>" "<|>" 

                                         "++" "+++"
                                         "=:=" "==" "===" "=/=" "/=" "/==" "//=" "!=" "!==" "=!="

                                         "::" ":::"
                                         "<:" ":<" ":>" ">:" "<:<" ":?>"

                                         "|>" "<|" "||>" "<||" "|||>" "<|||"

                                         ";;;"  ";;"

                                         "~@" "@_" "__" ))
    (global-ligature-mode 't))
#+end_src

  
* Languages Setup                                                                        :Languages:

** Universal Configurations                                                             :Universal:

*** [[https://www.flycheck.org/en/latest/][/flycheck/]]
[[https://www.flycheck.org/en/latest/][/flycheck/]] is a universal syntax checker.
It supports many languages out of the box, and seems to be better than the /flymake/ that comes by default with Emacs.

#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t)
#+end_src

This package is the recommended syntax checker for [[#emacs-lsp-mode][/lsp-mode/]].

*** [[https://emacs-lsp.github.io/lsp-mode/][/lsp-mode/]]
:PROPERTIES:
:CUSTOM_ID: emacs-lsp-mode
:END:

[[https://emacs-lsp.github.io/lsp-mode/][/lsp-mode/]] provides a way to integrates Language Server with Emacs, and works out of the box for many languages.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l") ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    :hook
    ((haskell-mode . lsp)
     (haskell-literate-mode . lsp)
     (rust-mode . lsp)
     (lsp-mode . lsp-enable-which-key-integration)) ;; if you want which-key integration
    :commands
    (lsp lsp-deferred))
#+end_src

The documentation is heavy, I have a few suggested reads:
- [[https://emacs-lsp.github.io/lsp-mode/page/main-features/][Main features]]
- [[https://emacs-lsp.github.io/lsp-mode/page/installation/#use-package][Install using /use-package/]]
- [[https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/][Rust setup]]
- [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][En/disabling features]]

*** [[https://company-mode.github.io/][/company-mode/]]
/company/ provides completion suggestions.

#+begin_src emacs-lisp
  (use-package company
    :diminish
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.2))
#+end_src

[[#emacs-lsp-mode][/lsp-mode/]] uses this to autocomplete.
However, everywhere else you need to manually activate with ~M-x company-mode~

You can find the source code [[https://github.com/company-mode/company-mode][here]].

** Haskell
Mostly just hooking up to [[#emacs-lsp-mode][/lsp-mode/]].
You can find related manual here:
- [[http://haskell.github.io/haskell-mode/manual/latest/][/haskell-mode/]] :: Provides access to REPL, editing shortcut, other quality of life

#+begin_src emacs-lisp
  (use-package lsp-haskell
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package haskell-mode
    :hook
    ((haskell-mode . interactive-haskell-mode)))
#+end_src

Make sure you have [[#dependency-haskell][HLS installed]].

** /Proof General/: Proof Assistants
:PROPERTIES:
:CUSTOM_ID: emacs-proof-general
:END:

#+begin_src emacs-lisp
  ;; (lemon/require-package 'proof-general)	;
  ;; (require 'proof-general)
#+end_src

#+begin_src emacs-lisp
  (setq
   proof-splash-enable nil	  ; No splash screen
   proof-three-window-mode-policy 'hybrid) ; Default to 2 columns layout
#+end_src

- [[https://proofgeneral.github.io/][Documentation]]

** Coq

[[https://github.com/cpitclaudel/company-coq][/company-coq/]] gives us completion support for Coq

#+begin_src emacs-lisp
  (use-package company-coq
    :diminish
    :hook
    ((coq-mode . company-coq-mode)))
#+end_src

** Rust

Not going to lie, I forgot why you need to manually add [[https://github.com/rust-lang/rust-mode][/rust-mode/]]...

#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

** Racket
[[https://racket-mode.com/][/racket-mode/]] is a package that doesn't integrate with /lsp-mode/.
But it works quite well:
- REPL integration
- Syntax highlight
- No need for DrRacket

#+begin_src emacs-lisp
  (use-package racket-mode
    :init
    (setq auto-mode-alist
          (append
           '(("\\.rkt\\'" . racket-mode))
           auto-mode-alist))
    :hook
    ((racket-mode . racket-unicode-input-method-enable)
     (racket-repl-mode . racket-unicode-input-method-enable)))

#+end_src

** Agda: Proof Assistant

Agda needs more setup:

- Installation: [[https://plfa.github.io/GettingStarted/][PLFA -> Get Started]] chapter

Following are the emacs configuration:
#+begin_src emacs-lisp
  (load-file (let ((coding-system-for-read 'utf-8))
               (shell-command-to-string "agda-mode locate")))

  ;; auto-load agda-mode for .agda and .lagda.md
  (setq auto-mode-alist
        (append
         '(("\\.agda\\'" . agda2-mode)
           ("\\.lagda.md\\'" . agda2-mode))
         auto-mode-alist))
#+end_src

*** Agda Face *(Breakable with bad dependency)*
#+begin_quote
*WARNING*: This part is really breakable if you didn't [[#dependency-agda][setup Agda]] properly
#+end_quote

Agda has a recommended face.
We setup that face to be only active in Agda mode

#+begin_src emacs-lisp
  (defun agda-buffer-face-mode ()
    "Set font to a variable width (proportional) fonts in current buffer"
    (interactive)
    (setq buffer-face-mode-face '(:family "mononoki"
                                          :height 120
                                          :width normal
                                          :weight normal))
    (buffer-face-mode))
  (add-hook 'agda2-mode-hook 'agda-buffer-face-mode)
#+end_src


** TeX

*** [[https://www.gnu.org/software/auctex/][/AUCTeX/]]: Better TeX Support

#+begin_src emacs-lisp
  (use-package tex
  :ensure auctex
  :hook
  ((LaTeX-mode . visual-line-mode))
  :config (setq TeX-auto-save t
		TeX-parse-self t))
#+end_src

*** [[https://github.com/jsinglet/latex-preview-pane][/latex-preview-pane/]]
This package opens a side panel when editing LaTeX files, and auto recompile on save.
However, the resolution is poor.
Now I use the default preview coming with /AucTeX/.
Activate the package if you wish

#+begin_src
  (use-package latex-preview-pane
    :diminish
    :hook ((LaTeX-mode . latex-preview-pane-mode)))
#+end_src

* Productivity                                                                        :Productivity:

** [[https://orgmode.org/][/Org Mode/]]                                                        :Org:
Perhaps the best thing about Emacs.
Agenda, calender, todolist, all in one.

*** Make Org Accessible
Some Org mode feature is best accessible anywhere, at anytime.
Examples includes:
- Opening agenda
- Capture ideas

#+begin_src emacs-lisp
  (defun lemon/org-global-key-setup ()
    ;;
    ;; (global-set-key (kbd "C-c l") #'org-store-link)
    ;; (global-set-key (kbd "C-c c") #'org-capture)

    ;; Open Agenda anywhere
    (global-set-key (kbd "C-c a") #'org-agenda))
#+end_src

*** Behaviour
By default Org can be ugly.
The following config does the following:
- Line wrap when too long
- Indent actual content for you
- Normal texts are displaying using variable pitch face
- Show a link as plain text (Easier to edit and debug)

#+begin_src emacs-lisp
  (defun lemon/org-mode-setup ()
    (visual-line-mode 1)
    (org-indent-mode)
    (variable-pitch-mode 1))
#+end_src
  
*** Faces
We want certain fonts to stand out, or be hidden, or have background

#+begin_src emacs-lisp
  (require 'org-indent) ; This is essential, or the face 'org-indent cannot be found

  (defun lemon/org-font-setup ()
    ;; Code block and inline code
    (set-face-attribute 'org-code nil
                        :inherit 'fixed-pitch
                        :foreground "black"
                        :background "LightGray")
    ;; Normal block
    (set-face-attribute 'org-block nil
                        :inherit 'fixed-pitch
                        :foreground "black"
                        :background "LightGray")
    ;; #+ started lines
    (set-face-attribute 'org-meta-line nil
                        :inherit 'fixed-pitch
                        ;; :background "#EAEAFF"
                        :foreground "#008ED1")
    ;; Default Org indents should be hidden
    (set-face-attribute 'org-indent nil
                        :inherit '(org-hide fixed-pitch))
    ;; Check box are now fixed pitch
    (set-face-attribute 'org-checkbox nil
                        :inherit 'fixed-pitch)
    ;; Special keywords are now fixed pitch
    (set-face-attribute 'org-special-keyword nil
                        :inherit '(font-lock-comment-face fixed-pitch))
    ;; Tables needs to be fixed pitch for lines to align
    (set-face-attribute 'org-table nil
                        :inherit 'fixed-pitch
                        :background "#d6e4fc")
    ;; Quotes now have a yellow background, like old paper
    (set-face-attribute 'org-quote nil
                        :foreground "black"
                        :background "AntiqueWhite1")
    ;; Block begin and ending are closer to white, less distracting
    (set-face-attribute 'org-block-begin-line nil ;; <-- end line inherit this
                        :inherit 'fixed-pitch
                        :inherit 'default
                        :foreground "Gray")
    ;; Drawer are also less distracting now
    (set-face-attribute 'org-drawer nil
                        :inherit 'fixed-pitch
                        :foreground "Gray")

    ;; In variable pitch mode, line numbers are also variable pitch
    ;; Reset to fixed pitch
    (set-face-attribute 'line-number nil
                        :inherit 'fixed-pitch)

    ;; A weird setting
    (setq org-fontify-quote-and-verse-blocks t))
#+end_src

The last line is needed as a result of [[https://list.orgmode.org/orgmode/Ml33lIeToTUsXIzeVEIolD5SsK-HJ0yrdPgOMr2N9WrldhU72LtjnGjehgViKAjMOgN5IAwM5Tx5TfCJlRBrTfnGnxqpuhy3-lEbUNycPMY=@williamdenton.org/][this]]

*** Appearance
There are more to appearance than faces and font.

**** Centred Text
By default, Org mode lines will be left aligned.
But we make it centred.
Better reading experience.

#+begin_src emacs-lisp
  (defun lemon/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-line-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . lemon/org-mode-visual-fill))
#+end_src

**** General Appearances
We want to hide as much distraction, gives us better literary programming experience.
WYSIWYG

#+begin_src emacs-lisp
  (defun lemon/org-appearance-setup ()

    ;; One show one star for headline
    ;; Indentation from org-indent-mode will handle depth
    (setq org-hide-leading-stars t)

    ;; Render superscript, subscript, special symbols
    (setq org-pretty-entities t)

    ;; Bold, italic, etc. are rendered as such, WYSIWYG
    (setq org-fontify-emphasized-text t)

    ;; Hiding the *...*, /.../ end markers
    ;; But will be harder to edit
    (setq org-hide-emphasis-markers t)

    ;; Highlight LaTeX
    (setq org-highlight-latex-and-related '(latex))

    ;; Use with visual-fill-column, attempt to right align tags
    (setq org-tags-column -100)

    ;; Show empty line between headers during folded view
    ;; As long as in actual text, there is 1 empty line between headers
    (setq org-cycle-separator-lines 1))
#+end_src

*** Task Management
Org's TODO list is great.
It would be better if there are more tags.

#+begin_src emacs-lisp
  (defun lemon/org-todo-setup ()
    ;; Add keywords
    (setq org-todo-keywords
          '((sequence "TODO(t)" "IDEA(i)" "PROG(p)" "VERIFY(v)" "|" "DONE(d)")
            (sequence "SKIM(s)" "READ(r)" "|")
            (sequence "BLOCKED(l)" "ON HOLD(h)" "BACKLOG(b)" "|" "CANCELED(x)")))

    ;; Customize keywords
    (setq org-todo-keyword-faces
          '(("IDEA" :inherit 'org-todo :foreground "gold2")
            ("PROG" :inherit 'org-todo :foreground "gold2")
            ("VERIFY" :inherit 'org-todo :foreground "gold2")
            ("SKIM" :inherit 'org-todo :foreground "gold2")
            ("READ" :inherit 'org-todo :foreground "gold2")
            ("BLOCKED" :inherit 'org-todo :foreground "SteelBlue")
            ("BACKLOG" :inherit 'org-todo :foreground "SteelBlue")
            ("ON HOLD" :inherit 'org-todo :foreground "SteelBlue")
            ("CANCELED" :inherit 'org-todo :foreground "CadetBlue")))

    ;; Log time on DONE
    ;; (setq org-log-done 'time)

    ;; Add more priorities
    (setq org-priority-lowest 70)
    (setq org-default-priority 70)
    )
#+end_src

*** Agenda
Agenda is a way to overview all the tasks.
By default, it shows 7 days, but we might want more.

#+begin_src emacs-lisp
  (defun lemon/org-agenda-setup ()
    (setq org-agenda-span 14))
#+end_src

*** Special Symbols
We add some special symbols.
Currently, I added logic symbols useful for programming languages research

#+begin_src emacs-lisp
  (defun lemon/org-entities-user ()
    (setq org-entities-user
          '(("vdash" "\\vdash" t "&RightTee;" "|-" "|-" "⊢")
            ("vDash" "\\vDash" t "&DoubleRightTee;" "|=" "|=" "⊨")
            ("dashv" "\\dashv" t "&dashv;" "-|" "-|" "⊣")
            ("nvdash" "\\nvdash" t "&nvdash;" "|-/-" "|-/-" "⊬")
            ("mapsto" "\\mapsto" t "&map;" "|->" "|->" "↦")
            ("top" "\\top" t "&DownTee;" "[down tee]" "[down tee]" "⊤")
            ("bot" "\\bot" t "&bot;" "[up tee]" "[up tee]" "⊥")
            ("subseteq" "\\subseteq" t "&sube;" "[subset of or equal to]" "[subset of or equal to]" "⊆")
          )))
#+end_src

*** Activation
We wrap all the configuration together now.

#+begin_src emacs-lisp
    (use-package org
      :hook
      ((org-mode . lemon/org-mode-setup)
       (org-mode . flyspell-mode))
      :config
      (lemon/org-global-key-setup)
      (lemon/org-appearance-setup)
      (lemon/org-font-setup)
      (lemon/org-todo-setup)
      (lemon/org-agenda-setup)
      (lemon/org-entities-user))
#+end_src

** Org Website Auto Change
I am making personal website with Org
The following package can host a website that will be constantly updated.

#+begin_src emacs-lisp
  (use-package simple-httpd
    :ensure t)
#+end_src

** Magit: Git in Emacs

#+begin_src emacs-lisp
  (lemon/require-package 'magit)
  (require 'magit)
#+end_src
