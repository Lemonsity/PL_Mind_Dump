
@inproceedings{wu_effect_2014,
	address = {New York, NY, USA},
	series = {Haskell '14},
	title = {Effect handlers in scope},
	isbn = {978-1-4503-3041-1},
	url = {https://dl.acm.org/doi/10.1145/2633357.2633358},
	doi = {10.1145/2633357.2633358},
	abstract = {Algebraic effect handlers are a powerful means for describing effectful computations. They provide a lightweight and orthogonal technique to define and compose the syntax and semantics of different effects. The semantics is captured by handlers, which are functions that transform syntax trees.Unfortunately, the approach does not support syntax for scoping constructs, which arise in a number of scenarios. While handlers can be used to provide a limited form of scope, we demonstrate that this approach constrains the possible interactions of effects and rules out some desired semantics.This paper presents two different ways to capture scoped constructs in syntax, and shows how to achieve different semantics by reordering handlers. The first approach expresses scopes using the existing algebraic handlers framework, but has some limitations. The problem is fully solved in the second approach where we introduce higher-order syntax.},
	urldate = {2024-12-18},
	booktitle = {Proceedings of the 2014 {ACM} {SIGPLAN} symposium on {Haskell}},
	publisher = {Association for Computing Machinery},
	author = {Wu, Nicolas and Schrijvers, Tom and Hinze, Ralf},
	month = sep,
	year = {2014},
	pages = {1--12},
	file = {Full Text PDF:/home/lemon/Zotero/storage/GVLEN4EW/Wu et al. - 2014 - Effect handlers in scope.pdf:application/pdf},
}

@article{van_den_berg_framework_2024,
	title = {A framework for higher-order effects \& handlers},
	volume = {234},
	issn = {0167-6423},
	url = {https://www.sciencedirect.com/science/article/pii/S0167642324000091},
	doi = {10.1016/j.scico.2024.103086},
	abstract = {Algebraic effects \& handlers are a modular approach for modeling side-effects in functional programming. Their syntax is defined in terms of a signature of effectful operations, encoded as a functor, that are plugged into the free monad; their denotational semantics is defined by fold-style handlers that only interpret their part of the syntax and forward the rest. However, not all effects are algebraic: some need to access an internal computation. For example, scoped effects distinguish between a computation in scope and out of scope; parallel effects parallelize over a computation, latent effects defer a computation. Separate definitions have been proposed for these higher-order effects and their corresponding handlers, often leading to expedient and complex monad definitions. In this work we propose a generic framework for higher-order effects, generalizing algebraic effects \& handlers: a generic free monad with higher-order effect signatures and a corresponding interpreter. Specializing this higher-order syntax leads to various definitions of previously defined (scoped, parallel, latent) and novel (writer, bracketing) effects. Furthermore, we formally show our framework theoretically correct, also putting different effect instances on formal footing; a significant contribution for parallel, latent, writer and bracketing effects.},
	urldate = {2025-02-04},
	journal = {Science of Computer Programming},
	author = {van den Berg, Birthe and Schrijvers, Tom},
	month = may,
	year = {2024},
	keywords = {Algebraic effects and handlers, Datatypes Ã  la carte, Free monad, Higher-order effects and handlers},
	pages = {103086},
	file = {Accepted Version:/home/lemon/Zotero/storage/VPP8I2WM/van den Berg and Schrijvers - 2024 - A framework for higher-order effects & handlers.pdf:application/pdf;ScienceDirect Snapshot:/home/lemon/Zotero/storage/ATLN48RR/S0167642324000091.html:text/html},
}

@article{bosman_calculus_2024,
	title = {A {Calculus} for {Scoped} {Effects} \& {Handlers}},
	volume = {Volume 20, Issue 4},
	issn = {1860-5974},
	url = {https://lmcs.episciences.org/14832},
	doi = {10.46298/lmcs-20(4:17)2024},
	abstract = {Algebraic effects \& handlers have become a standard approach for side-effects in functional programming. Their modular composition with other effects and clean separation of syntax and semantics make them attractive to a wide audience. However, not all effects can be classified as algebraic; some need a more sophisticated handling. In particular, effects that have or create a delimited scope need special care, as their continuation consists of two parts-in and out of the scope-and their modular composition introduces additional complexity. These effects are called scoped and have gained attention by their growing applicability and adoption in popular libraries. While calculi have been designed with algebraic effects \& handlers built in to facilitate their use, a calculus that supports scoped effects \& handlers in a similar manner does not yet exist. This work fills this gap: we present \${\textbackslash}lambda\_\{{\textbackslash}mathit\{sc\}\}\$, a calculus with native support for both algebraic and scoped effects \& handlers. It addresses the need for polymorphic handlers and explicit clauses for forwarding unknown scoped operations to other handlers. Our calculus is based on Eff, an existing calculus for algebraic effects, extended with Koka-style row polymorphism, and consists of a formal grammar, operational semantics, a (type-safe) type-and-effect system and type inference. We demonstrate \${\textbackslash}lambda\_\{{\textbackslash}mathit\{sc\}\}\$ on a range of examples.},
	urldate = {2025-02-05},
	journal = {Logical Methods in Computer Science},
	author = {Bosman, Roger and Berg, Birthe van den and Tang, Wenhao and Schrijvers, Tom},
	month = nov,
	year = {2024},
	note = {Publisher: Episciences.org},
	file = {Full Text PDF:/home/lemon/Zotero/storage/XES9EKM8/Bosman et al. - 2024 - A Calculus for Scoped Effects & Handlers.pdf:application/pdf},
}
