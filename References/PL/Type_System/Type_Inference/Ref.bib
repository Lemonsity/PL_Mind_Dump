@article{10.1145/3408971,
author = {Serrano, Alejandro and Hage, Jurriaan and Peyton Jones, Simon and Vytiniotis, Dimitrios},
title = {A quick look at impredicativity},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ICFP},
url = {https://doi.org/10.1145/3408971},
doi = {10.1145/3408971},
abstract = {Type inference for parametric polymorphism is wildly successful, but has always suffered from an embarrassing flaw: polymorphic types are themselves not first class. We present Quick Look, a practical, implemented, and deployable design for impredicative type inference. To demonstrate our claims, we have modified GHC, a production-quality Haskell compiler, to support impredicativity. The changes required are modest, localised, and are fully compatible with GHC's myriad other type system extensions.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {89},
numpages = {29},
keywords = {Type systems, constraint-based inference, impredicative polymorphism}
}

@article{JONES_VYTINIOTIS_WEIRICH_SHIELDS_2007,
title={Practical type inference for arbitrary-rank types},
volume={17},
DOI={10.1017/S0956796806006034},
number={1},
journal={Journal of Functional Programming},
author={JONES, SIMON PEYTON and VYTINIOTIS, DIMITRIOS and WEIRICH, STEPHANIE and SHIELDS, MARK},
year={2007},
pages={1–82}
}

@inproceedings{10.1145/2500365.2500582,
author = {Dunfield, Jana and Krishnaswami, Neelakantan R.},
title = {Complete and easy bidirectional typechecking for higher-rank polymorphism},
year = {2013},
isbn = {9781450323260},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2500365.2500582},
doi = {10.1145/2500365.2500582},
abstract = {Bidirectional typechecking, in which terms either synthesize a type or are checked against a known type, has become popular for its scalability (unlike Damas-Milner type inference, bidirectional typing remains decidable even for very expressive type systems), its error reporting, and its relative ease of implementation. Following design principles from proof theory, bidirectional typing can be applied to many type constructs. The principles underlying a bidirectional approach to polymorphism, however, are less obvious. We give a declarative, bidirectional account of higher-rank polymorphism, grounded in proof theory; this calculus enjoys many properties such as eta-reduction and predictability of annotations. We give an algorithm for implementing the declarative system; our algorithm is remarkably simple and well-behaved, despite being both sound and complete.},
booktitle = {Proceedings of the 18th ACM SIGPLAN International Conference on Functional Programming},
pages = {429–442},
numpages = {14},
keywords = {bidirectional typechecking, higher-rank polymorphism},
location = {Boston, Massachusetts, USA},
series = {ICFP '13}
}

@article{10.1145/2544174.2500582,
author = {Dunfield, Jana and Krishnaswami, Neelakantan R.},
title = {Complete and easy bidirectional typechecking for higher-rank polymorphism},
year = {2013},
issue_date = {September 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/2544174.2500582},
doi = {10.1145/2544174.2500582},
abstract = {Bidirectional typechecking, in which terms either synthesize a type or are checked against a known type, has become popular for its scalability (unlike Damas-Milner type inference, bidirectional typing remains decidable even for very expressive type systems), its error reporting, and its relative ease of implementation. Following design principles from proof theory, bidirectional typing can be applied to many type constructs. The principles underlying a bidirectional approach to polymorphism, however, are less obvious. We give a declarative, bidirectional account of higher-rank polymorphism, grounded in proof theory; this calculus enjoys many properties such as eta-reduction and predictability of annotations. We give an algorithm for implementing the declarative system; our algorithm is remarkably simple and well-behaved, despite being both sound and complete.},
journal = {SIGPLAN Not.},
month = sep,
pages = {429–442},
numpages = {14},
keywords = {bidirectional typechecking, higher-rank polymorphism}
}

@article{10.1145/1631687.1596599,
author = {Schrijvers, Tom and Peyton Jones, Simon and Sulzmann, Martin and Vytiniotis, Dimitrios},
title = {Complete and decidable type inference for GADTs},
year = {2009},
issue_date = {September 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/1631687.1596599},
doi = {10.1145/1631687.1596599},
abstract = {GADTs have proven to be an invaluable language extension, for ensuring data invariants and program correctness among others. Unfortunately, they pose a tough problem for type inference: we lose the principal-type property, which is necessary for modular type inference.We present a novel and simplified type inference approach for local type assumptions from GADT pattern matches. Our approach is complete and decidable, while more liberal than previous such approaches.},
journal = {SIGPLAN Not.},
month = aug,
pages = {341–352},
numpages = {12},
keywords = {GADTs, Haskell, type inference}
}

@inproceedings{10.1145/1596550.1596599,
author = {Schrijvers, Tom and Peyton Jones, Simon and Sulzmann, Martin and Vytiniotis, Dimitrios},
title = {Complete and decidable type inference for GADTs},
year = {2009},
isbn = {9781605583327},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1596550.1596599},
doi = {10.1145/1596550.1596599},
abstract = {GADTs have proven to be an invaluable language extension, for ensuring data invariants and program correctness among others. Unfortunately, they pose a tough problem for type inference: we lose the principal-type property, which is necessary for modular type inference.We present a novel and simplified type inference approach for local type assumptions from GADT pattern matches. Our approach is complete and decidable, while more liberal than previous such approaches.},
booktitle = {Proceedings of the 14th ACM SIGPLAN International Conference on Functional Programming},
pages = {341–352},
numpages = {12},
keywords = {GADTs, Haskell, type inference},
location = {Edinburgh, Scotland},
series = {ICFP '09}
}

